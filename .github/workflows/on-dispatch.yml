name: On SDK Update Dispatch

# Listens for a webhook event of type sdk-updated sent from the SDK repo. When the notify-watcher.yml file dispatches this event, this workflow runs
on:
  repository_dispatch:
    types: [sdk-updated]

jobs:

  # JOB 1: logs the file paths received from the dispatch event
  log-dispatch:
    runs-on: ubuntu-latest
    steps:
      - name: Log updated files from payload
        run: |
          echo "Updated files received:"
          echo "${{ github.event.client_payload.updated_files }}"

  # JOB 2: Adds inline comments to newly changed sample files
  comment-samples:
    runs-on: ubuntu-latest
    permissions: #Grants permission to write to the SDK repo, which is required to push comments
      contents: write
    steps:

      #Debug step
      - name: Print dispatch payload
        run: |
          echo "Payload: ${{ toJson(github.event.client_payload) }}"

      # Logs the incoming updated file list and saves the file paths to a txt file for the generate_comments.py script to use
      - name: Extract updated sample files from dispatch payload
        run: |
          echo '${{ toJson(github.event.client_payload.updated_files) }}' \
          | jq -r '.[]' > updated_files.txt


      # Checks the current (watcher) repo so we can run the script
      - name: Checkout Watcher Repo
        uses: actions/checkout@v3

      # Checks out the SDK repo (Python version) into a folder called python-sdk
      - name: Checkout SDK Repo
        uses: actions/checkout@v3
        with:
          repository: mayaealexander/azure-sdk-for-python
          token: ${{ secrets.SDK_REPO_PAT }}
          path: python-sdk

      # Sets up Python 3.10 on the runner 
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Installs the OpenAI Python SDK (can add other dependencies used in the script here or switch to pip install -r requirements.txt)
      - name: Install dependencies
        run: pip install openai

      - name: List files in workspace
        run: ls -la

        
      # Runs the commenting script, passing 'updated_files.txt' (containing the paths of changed files) and 'python-sdk' (the folder with the SDK repo lives)
      - name: Run AI commenting script
        run: |
          ls -la
          cat updated_files.txt || echo "File not found"
          python generate_comments.py updated_files.txt python-sdk


      # Moves into the SDK repo folder, sets a noreply email for the commit, stages any file changes, and commits ONLY if there are changes, then pushes to main branch
      - name: Commit and push changes to SDK repo
        run: |
          cd python-sdk
          git config user.name "AI Comment Assistant"
          git config user.email "mayaealexander@users.noreply.github.com"
          git add .
          git diff --cached --quiet || git commit -m "Add inline comments via AI assistant"
          git push origin main

      
